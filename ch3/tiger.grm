%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm empty | program | exp | expseq | explist | dec | decs | tydec | vardec | fundec |
	ty | tyfields | recordargs | lvalue | lvalue_exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%
(* 
	TODO: 
		- lvalue parsing
		- record assignment/creation
*)
program	: exp ()

	
exp : 
	STRING (print "exp -> STRING\n")
	| INT (print "exp -> INT\n")
	| ID (print "exp -> ID\n")
	| exp EQ exp (print "exp -> equal\n")
	| exp NEQ exp (print "exp -> not equal\n")
	| exp TIMES exp (print "exp -> times\n")
	| exp MINUS exp (print "exp -> minus\n")
	| exp DIVIDE exp (print "exp -> divide\n")
	| exp PLUS exp (print "exp -> plus\n")
	| exp GT exp (print "exp -> greater than\n")
	| exp LT exp (print "exp -> less than\n")
	| exp GE exp (print "exp -> greater equal\n")
	| exp LE exp (print "exp -> less equal\n")
	| exp AND exp (print "exp -> and \n")
	| exp OR exp (print "exp -> or \n")
	
	

	| ID LBRACK exp RBRACK OF exp (print "exp -> array creation\n")
	| ID LBRACE recordargs RBRACE (print "exp -> record creation\n")
	| ID LPAREN explist RPAREN (print "exp -> function call\n")
	
	| FOR ID ASSIGN exp TO exp DO exp (print "exp -> for")
	| IF exp THEN exp ELSE exp (print "exp -> if then else\n")
	| IF exp THEN exp (print "exp -> if then\n")
	| WHILE exp DO exp (print "exp -> while do\n")
	| lvalue_exp (print "exp -> lvalue_exp\n")
	| lvalue ASSIGN exp (print "exp -> assignment\n")
	| LET decs IN expseq END (print "exp -> let in end\n")
	| LPAREN expseq RPAREN (print "exp -> expseq\n")

	| NIL (print "exp -> NIL\n")
	| EOF (print "exp -> EOF\n")

expseq :
	empty	(print "expseq -> empty\n")
	| exp 	(print "expseq -> single\n")
	| exp SEMICOLON expseq 	(print "expseq -> multiple\n")

explist :
	empty (print "expist -> empty\n")
	| exp (print "explist -> single\n")
	| exp COMMA explist (print "explist -> multiple\n")
	
decs : 
	dec (print "decs -> single dec\n")
	| decs dec (print "decs -> multiple decs\n")

dec : 
	tydec	(print "dec -> tydec\n")
	| vardec	(print "dec -> tydec\n")
	| fundec	(print "dec -> tydec\n")

tydec : TYPE ID EQ ty	(print "tydec -> type id eq ty\n")

ty : 
	ID	(print "ty -> ID\n")
	| LBRACE tyfields RBRACE (print "ty -> rec tyfields\n")
	| ARRAY OF ID	(print "ty -> array of id\n")

tyfields : 
	empty	(print "tyfields -> empty\n")
	| ID COLON ID COMMA tyfields	(print "tyfields -> w/ comma\n")
	| ID COLON ID 	(print "tyfields -> single\n")

vardec :
	VAR ID ASSIGN exp	(print "vardec -> w/o type\n")
	| VAR ID COLON ID ASSIGN exp	(print "vardec -> w/ type\n")

fundec :
	FUNCTION ID LPAREN tyfields RPAREN EQ exp	(print "fundec -> w/o type\n")
	| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	(print "fundec -> w/type \n")

lvalue :
	ID (print "lvalue -> ID\n")
	| lvalue_exp (print "lvalue -> lvalue_exp\n")

lvalue_exp :
	lvalue DOT ID (print "lvalue_exp -> lvalue.ID\n")
	| lvalue LBRACK exp RBRACK (print "lvalue_exp ->lvalue[exp]\n")
	| ID LBRACK exp RBRACK (print "lvalue_exp ->ID[exp]\n")
	
recordargs :
	empty (print "recordargs -> empty\n")
	| ID EQ exp (print "recordargs-> single\n")
	| ID EQ exp COMMA recordargs (print "recordargs -> multiple\n")
	
empty : ()