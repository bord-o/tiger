%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm empty | program | exp | expseq | dec | decs | tydec | vardec | fundec |
	ty | tyfields | lvalue 

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp ()

	
exp : 
	STRING (print "exp -> STRING\n")
	| INT (print "exp -> STRING\n")
	| LET decs IN exp END (print "exp -> let in end\n")
	| exp SEMICOLON exp (print "exp -> exp ; exp\n")
	| EOF (print "exp -> EOF\n")

decs : 
	dec (print "decs -> dec\n")
	| decs (print "decs -> decs\n")

dec : 
	tydec	()
	| vardec	()
	| fundec	()

tydec : TYPE ID EQ ty	()

ty : 
	ID	()
	| LBRACK tyfields RBRACK	()
	| ARRAY OF ID	()

tyfields : 
	empty	()
	| ID COLON ID COMMA tyfields	()
	| ID COLON ID 	()

vardec :
	VAR ID ASSIGN exp	()
	| VAR ID COLON ID ASSIGN exp	()

fundec :
	FUNCTION ID LPAREN tyfields RPAREN EQ exp	()
	| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp	()
