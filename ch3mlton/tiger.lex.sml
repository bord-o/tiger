(*#line 35.10 "tiger.lex"*)functor TigerLexFun (structure Tokens: Tiger_TOKENS)(*#line 1.1 "tiger.lex.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "tiger.lex"*)type svalue = Tokens.svalue
type pos = int
type ('a, 'b) token = ('a, 'b) Tokens.token
type lexresult = (svalue, pos) token



val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
fun err(p1,p2) = ErrorMsg.error p1


val stringStart = ref 0
val currentString = ref ""
fun appendString s = currentString := !currentString ^ s

val comment_depth = ref 0
fun inc_comment depth = ( depth := !depth+1)
fun dec_comment depth = (depth := !depth-1 )
	
fun eof () = 
	let
	    val pos = hd(!linePos)
	    val commentError = "Unclosed Comment Detected."
	in 
		(if !comment_depth <> 0
	    then ErrorMsg.error pos commentError else ();
	    Tokens.EOF(pos, pos))
	end

fun nextLine pos = (lineNum := !lineNum + 1; linePos := pos :: !linePos)


(*#line 39.1 "tiger.lex.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\013\013\013\013\013\013\013\013\013\098\101\013\013\100\013\013\
\\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\
\\098\013\097\013\013\013\096\013\095\094\093\092\091\090\089\087\
\\085\085\085\085\085\085\085\085\085\085\083\082\079\078\076\013\
\\013\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\075\013\074\013\013\
\\013\069\064\017\062\056\046\017\017\043\017\017\040\017\037\035\
\\017\017\017\017\027\017\024\019\017\017\017\016\015\014\013\013\
\\013"
),
 (3, 
"\102\102\102\102\102\102\102\102\102\102\108\102\102\107\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\105\102\102\102\102\103\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102"
),
 (5, 
"\109\109\109\109\109\109\109\109\109\109\112\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\111\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\110\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\109\
\\109"
),
 (7, 
"\113\113\113\113\113\113\113\113\113\113\121\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\117\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\118\118\118\118\118\118\118\118\118\118\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\117\113\116\113\
\\113\113\113\113\113\113\113\113\113\113\113\113\113\113\115\113\
\\113\113\113\113\114\113\113\113\113\113\113\113\113\113\113\113\
\\113"
),
 (9, 
"\122\122\122\122\122\122\122\122\122\123\126\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\123\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\125\122\122\122\
\\122\122\122\122\122\122\123\122\122\122\122\122\122\122\122\122\
\\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\122\
\\122"
),
 (11, 
"\127\127\127\127\127\127\127\127\127\127\000\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\127\
\\127"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\020\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\021\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\022\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\023\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\025\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\026\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (27, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\032\018\018\018\018\018\018\031\
\\018\018\018\018\018\018\018\018\018\028\018\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\029\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\030\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\033\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\034\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\036\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\038\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (38, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\039\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\041\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\042\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (43, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\045\018\018\018\018\018\018\018\044\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\054\
\\018\018\018\018\018\047\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (47, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\048\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\049\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\050\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\051\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\052\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (52, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\053\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (54, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\055\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (56, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\059\018\057\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (57, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\058\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\060\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (60, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\061\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (62, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\063\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (64, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\065\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (65, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\066\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\067\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (67, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\068\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\070\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (70, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\071\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\072\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\
\\000"
),
 (72, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\018\018\018\018\018\018\018\018\018\018\000\000\000\000\000\000\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\018\018\000\000\000\000\018\
\\000\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\
\\018\018\018\018\018\018\018\018\018\073\018\000\000\000\000\000\
\\000"
),
 (76, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\077\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (79, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\081\080\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (83, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\084\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (85, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\086\086\086\086\086\086\086\086\086\086\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (87, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\088\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (98, 
"\000\000\000\000\000\000\000\000\000\099\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\099\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (100, 
"\000\000\000\000\000\000\000\000\000\000\101\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (103, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\104\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (105, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\106\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (107, 
"\000\000\000\000\000\000\000\000\000\000\108\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (118, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\119\119\119\119\119\119\119\119\119\119\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (119, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\120\120\120\120\120\120\120\120\120\120\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (123, 
"\000\000\000\000\000\000\000\000\000\124\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\124\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\124\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [], trans = 3},
{fin = [], trans = 3},
{fin = [], trans = 5},
{fin = [], trans = 5},
{fin = [], trans = 7},
{fin = [], trans = 7},
{fin = [], trans = 9},
{fin = [], trans = 9},
{fin = [], trans = 11},
{fin = [], trans = 11},
{fin = [(N 198)], trans = 0},
{fin = [(N 124),(N 198)], trans = 0},
{fin = [(N 89),(N 198)], trans = 0},
{fin = [(N 122),(N 198)], trans = 0},
{fin = [(N 151),(N 198)], trans = 17},
{fin = [(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 19},
{fin = [(N 151)], trans = 20},
{fin = [(N 151)], trans = 21},
{fin = [(N 151)], trans = 22},
{fin = [(N 61),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 24},
{fin = [(N 151)], trans = 25},
{fin = [(N 12),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 27},
{fin = [(N 151)], trans = 28},
{fin = [(N 151)], trans = 29},
{fin = [(N 82),(N 151)], trans = 17},
{fin = [(N 51),(N 151)], trans = 17},
{fin = [(N 151)], trans = 32},
{fin = [(N 151)], trans = 33},
{fin = [(N 71),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 35},
{fin = [(N 30),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 37},
{fin = [(N 151)], trans = 38},
{fin = [(N 41),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 40},
{fin = [(N 151)], trans = 41},
{fin = [(N 45),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 43},
{fin = [(N 37),(N 151)], trans = 17},
{fin = [(N 8),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 46},
{fin = [(N 151)], trans = 47},
{fin = [(N 151)], trans = 48},
{fin = [(N 151)], trans = 49},
{fin = [(N 151)], trans = 50},
{fin = [(N 151)], trans = 51},
{fin = [(N 151)], trans = 52},
{fin = [(N 21),(N 151)], trans = 17},
{fin = [(N 151)], trans = 54},
{fin = [(N 55),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 56},
{fin = [(N 151)], trans = 57},
{fin = [(N 34),(N 151)], trans = 17},
{fin = [(N 151)], trans = 59},
{fin = [(N 151)], trans = 60},
{fin = [(N 66),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 62},
{fin = [(N 48),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 64},
{fin = [(N 151)], trans = 65},
{fin = [(N 151)], trans = 66},
{fin = [(N 151)], trans = 67},
{fin = [(N 27),(N 151)], trans = 17},
{fin = [(N 151),(N 198)], trans = 69},
{fin = [(N 151)], trans = 70},
{fin = [(N 151)], trans = 71},
{fin = [(N 151)], trans = 72},
{fin = [(N 77),(N 151)], trans = 17},
{fin = [(N 120),(N 198)], trans = 0},
{fin = [(N 118),(N 198)], trans = 0},
{fin = [(N 96),(N 198)], trans = 76},
{fin = [(N 94)], trans = 0},
{fin = [(N 106),(N 198)], trans = 0},
{fin = [(N 101),(N 198)], trans = 79},
{fin = [(N 104)], trans = 0},
{fin = [(N 99)], trans = 0},
{fin = [(N 132),(N 198)], trans = 0},
{fin = [(N 130),(N 198)], trans = 83},
{fin = [(N 85)], trans = 0},
{fin = [(N 154),(N 198)], trans = 85},
{fin = [(N 154)], trans = 85},
{fin = [(N 108),(N 198)], trans = 87},
{fin = [(N 135)], trans = 0},
{fin = [(N 116),(N 198)], trans = 0},
{fin = [(N 112),(N 198)], trans = 0},
{fin = [(N 87),(N 198)], trans = 0},
{fin = [(N 114),(N 198)], trans = 0},
{fin = [(N 110),(N 198)], trans = 0},
{fin = [(N 128),(N 198)], trans = 0},
{fin = [(N 126),(N 198)], trans = 0},
{fin = [(N 91),(N 198)], trans = 0},
{fin = [(N 156),(N 198)], trans = 0},
{fin = [(N 5),(N 198)], trans = 98},
{fin = [(N 5)], trans = 98},
{fin = [(N 198)], trans = 100},
{fin = [(N 2)], trans = 0},
{fin = [(N 143)], trans = 0},
{fin = [(N 143)], trans = 103},
{fin = [(N 138)], trans = 0},
{fin = [(N 143)], trans = 105},
{fin = [(N 146)], trans = 0},
{fin = [(N 143)], trans = 107},
{fin = [(N 141)], trans = 0},
{fin = [(N 164)], trans = 0},
{fin = [(N 158),(N 164)], trans = 0},
{fin = [(N 160),(N 164)], trans = 0},
{fin = [(N 162)], trans = 0},
{fin = [(N 181)], trans = 0},
{fin = [(N 173),(N 181)], trans = 0},
{fin = [(N 171),(N 181)], trans = 0},
{fin = [(N 175),(N 181)], trans = 0},
{fin = [(N 167),(N 181)], trans = 0},
{fin = [(N 181)], trans = 118},
{fin = [], trans = 119},
{fin = [(N 179)], trans = 0},
{fin = [(N 169)], trans = 0},
{fin = [(N 194)], trans = 0},
{fin = [(N 190),(N 194)], trans = 123},
{fin = [(N 190)], trans = 123},
{fin = [(N 183),(N 194)], trans = 0},
{fin = [(N 192)], trans = 0},
{fin = [(N 196)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val COMMENT = STARTSTATE 3;
val INITIAL = STARTSTATE 1;
val STRING = STARTSTATE 5;
val STRING_CONTROL = STARTSTATE 11;
val STRING_ESCAPE = STARTSTATE 7;
val STRING_LONG_ESCAPE = STARTSTATE 9;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => ((*#line 73.18 "tiger.lex"*)Tokens.LT(yypos,yypos+1)(*#line 882.1 "tiger.lex.sml"*)
)
| 104 => ((*#line 74.19 "tiger.lex"*)Tokens.NEQ(yypos,yypos+2)(*#line 884.1 "tiger.lex.sml"*)
)
| 106 => ((*#line 75.18 "tiger.lex"*)Tokens.EQ(yypos,yypos+1)(*#line 886.1 "tiger.lex.sml"*)
)
| 108 => ((*#line 76.18 "tiger.lex"*)Tokens.DIVIDE(yypos,yypos+1)(*#line 888.1 "tiger.lex.sml"*)
)
| 110 => ((*#line 77.18 "tiger.lex"*)Tokens.TIMES(yypos,yypos+1)(*#line 890.1 "tiger.lex.sml"*)
)
| 112 => ((*#line 78.18 "tiger.lex"*)Tokens.MINUS(yypos,yypos+1)(*#line 892.1 "tiger.lex.sml"*)
)
| 114 => ((*#line 79.18 "tiger.lex"*)Tokens.PLUS(yypos,yypos+1)(*#line 894.1 "tiger.lex.sml"*)
)
| 116 => ((*#line 80.18 "tiger.lex"*)Tokens.DOT(yypos,yypos+1)(*#line 896.1 "tiger.lex.sml"*)
)
| 118 => ((*#line 81.18 "tiger.lex"*)Tokens.LBRACK(yypos,yypos+1)(*#line 898.1 "tiger.lex.sml"*)
)
| 12 => ((*#line 50.18 "tiger.lex"*)Tokens.VAR(yypos,yypos+3)(*#line 900.1 "tiger.lex.sml"*)
)
| 120 => ((*#line 82.18 "tiger.lex"*)Tokens.RBRACK(yypos,yypos+1)(*#line 902.1 "tiger.lex.sml"*)
)
| 122 => ((*#line 83.18 "tiger.lex"*)Tokens.LBRACE(yypos,yypos+1)(*#line 904.1 "tiger.lex.sml"*)
)
| 124 => ((*#line 84.18 "tiger.lex"*)Tokens.RBRACE(yypos,yypos+1)(*#line 906.1 "tiger.lex.sml"*)
)
| 126 => ((*#line 85.18 "tiger.lex"*)Tokens.LPAREN(yypos,yypos+1)(*#line 908.1 "tiger.lex.sml"*)
)
| 128 => ((*#line 86.18 "tiger.lex"*)Tokens.RPAREN(yypos,yypos+1)(*#line 910.1 "tiger.lex.sml"*)
)
| 130 => ((*#line 88.18 "tiger.lex"*)Tokens.COLON(yypos,yypos+1)(*#line 912.1 "tiger.lex.sml"*)
)
| 132 => ((*#line 89.18 "tiger.lex"*)Tokens.SEMICOLON(yypos,yypos+1)(*#line 914.1 "tiger.lex.sml"*)
)
| 135 => ((*#line 91.19 "tiger.lex"*)YYBEGIN COMMENT;(inc_comment comment_depth); continue()(*#line 916.1 "tiger.lex.sml"*)
)
| 138 => ((*#line 92.19 "tiger.lex"*)(inc_comment comment_depth); continue()(*#line 918.1 "tiger.lex.sml"*)
)
| 141 => ((*#line 94.20 "tiger.lex"*)lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()(*#line 920.1 "tiger.lex.sml"*)
)
| 143 => ((*#line 95.16 "tiger.lex"*)continue()(*#line 922.1 "tiger.lex.sml"*)
)
| 146 => ((*#line 97.19 "tiger.lex"*)(dec_comment comment_depth);(if !comment_depth = 0 then YYBEGIN INITIAL else ()); continue()(*#line 924.1 "tiger.lex.sml"*)
)
| 151 => let val yytext=yymktext() in (*#line 99.44 "tiger.lex"*)Tokens.ID (yytext, yypos, yypos + size yytext)(*#line 926.1 "tiger.lex.sml"*)
 end
| 154 => let val yytext=yymktext() in (*#line 100.23 "tiger.lex"*)Tokens.INT (Option.valOf(Int.fromString(yytext)), yypos, yypos+size(yytext))(*#line 928.1 "tiger.lex.sml"*)
 end
| 156 => ((*#line 102.21 "tiger.lex"*)YYBEGIN STRING; currentString := ""; stringStart := yypos; continue ()(*#line 930.1 "tiger.lex.sml"*)
)
| 158 => ((*#line 103.21 "tiger.lex"*)YYBEGIN STRING_ESCAPE; continue ()(*#line 932.1 "tiger.lex.sml"*)
)
| 160 => ((*#line 104.21 "tiger.lex"*)YYBEGIN INITIAL;
                    Tokens.STRING (!currentString, !stringStart, yypos + 1)(*#line 935.1 "tiger.lex.sml"*)
)
| 162 => ((*#line 106.21 "tiger.lex"*)ErrorMsg.error (hd(!linePos)) "Unclosed String."; nextLine (yypos); 
                    YYBEGIN INITIAL; continue ()(*#line 938.1 "tiger.lex.sml"*)
)
| 164 => let val yytext=yymktext() in (*#line 108.21 "tiger.lex"*)appendString yytext; continue ()(*#line 940.1 "tiger.lex.sml"*)
 end
| 167 => let val yytext=yymktext() in (*#line 109.33 "tiger.lex"*)appendString yytext; YYBEGIN STRING; continue ()(*#line 942.1 "tiger.lex.sml"*)
 end
| 169 => ((*#line 110.33 "tiger.lex"*)YYBEGIN STRING_LONG_ESCAPE; nextLine (yypos); continue ()(*#line 944.1 "tiger.lex.sml"*)
)
| 171 => ((*#line 111.33 "tiger.lex"*)appendString "\n"; YYBEGIN STRING; continue ()(*#line 946.1 "tiger.lex.sml"*)
)
| 173 => ((*#line 112.33 "tiger.lex"*)appendString "\t"; YYBEGIN STRING; continue ()(*#line 948.1 "tiger.lex.sml"*)
)
| 175 => ((*#line 113.35 "tiger.lex"*)YYBEGIN STRING_CONTROL; continue ()(*#line 950.1 "tiger.lex.sml"*)
)
| 179 => let val yytext=yymktext() in (*#line 114.33 "tiger.lex"*)appendString (String.str (chr (valOf (Int.fromString yytext))));
                                YYBEGIN STRING; continue ()(*#line 953.1 "tiger.lex.sml"*)
 end
| 181 => let val yytext=yymktext() in (*#line 116.33 "tiger.lex"*)ErrorMsg.error (hd(!linePos)) ("Illegal Escape Expression: " ^ yytext);
                                YYBEGIN STRING; continue ()(*#line 956.1 "tiger.lex.sml"*)
 end
| 183 => ((*#line 119.33 "tiger.lex"*)YYBEGIN STRING; continue ()(*#line 958.1 "tiger.lex.sml"*)
)
| 190 => ((*#line 120.39 "tiger.lex"*)continue ()(*#line 960.1 "tiger.lex.sml"*)
)
| 192 => ((*#line 121.33 "tiger.lex"*)nextLine (yypos); continue ()(*#line 962.1 "tiger.lex.sml"*)
)
| 194 => let val yytext=yymktext() in (*#line 122.33 "tiger.lex"*)ErrorMsg.error (hd(!linePos)) ("Improper Multi-line String: " ^ yytext); continue ()(*#line 964.1 "tiger.lex.sml"*)
 end
| 196 => let val yytext=yymktext() in (*#line 123.25 "tiger.lex"*)appendString (String.str (chr (ord (String.sub(yytext, 0)) - 64)));
                        YYBEGIN STRING; continue ()(*#line 967.1 "tiger.lex.sml"*)
 end
| 198 => let val yytext=yymktext() in (*#line 127.16 "tiger.lex"*)ErrorMsg.error yypos ("illegal character " ^ yytext); continue()(*#line 969.1 "tiger.lex.sml"*)
 end
| 2 => ((*#line 46.20 "tiger.lex"*)nextLine yypos; continue()(*#line 971.1 "tiger.lex.sml"*)
)
| 21 => ((*#line 51.23 "tiger.lex"*)Tokens.FUNCTION(yypos,yypos+8)(*#line 973.1 "tiger.lex.sml"*)
)
| 27 => ((*#line 52.20 "tiger.lex"*)Tokens.BREAK(yypos,yypos+5)(*#line 975.1 "tiger.lex.sml"*)
)
| 30 => ((*#line 53.17 "tiger.lex"*)Tokens.OF(yypos,yypos+2)(*#line 977.1 "tiger.lex.sml"*)
)
| 34 => ((*#line 54.18 "tiger.lex"*)Tokens.END(yypos,yypos+3)(*#line 979.1 "tiger.lex.sml"*)
)
| 37 => ((*#line 55.17 "tiger.lex"*)Tokens.IN(yypos,yypos+2)(*#line 981.1 "tiger.lex.sml"*)
)
| 41 => ((*#line 56.18 "tiger.lex"*)Tokens.NIL(yypos,yypos+3)(*#line 983.1 "tiger.lex.sml"*)
)
| 45 => ((*#line 57.18 "tiger.lex"*)Tokens.LET(yypos,yypos+3)(*#line 985.1 "tiger.lex.sml"*)
)
| 48 => ((*#line 58.17 "tiger.lex"*)Tokens.DO(yypos,yypos+2)(*#line 987.1 "tiger.lex.sml"*)
)
| 5 => ((*#line 47.20 "tiger.lex"*)lex()(*#line 989.1 "tiger.lex.sml"*)
)
| 51 => ((*#line 59.17 "tiger.lex"*)Tokens.TO(yypos,yypos+2)(*#line 991.1 "tiger.lex.sml"*)
)
| 55 => ((*#line 60.18 "tiger.lex"*)Tokens.FOR(yypos,yypos+3)(*#line 993.1 "tiger.lex.sml"*)
)
| 61 => ((*#line 61.20 "tiger.lex"*)Tokens.WHILE(yypos,yypos+5)(*#line 995.1 "tiger.lex.sml"*)
)
| 66 => ((*#line 62.19 "tiger.lex"*)Tokens.ELSE(yypos,yypos+4)(*#line 997.1 "tiger.lex.sml"*)
)
| 71 => ((*#line 63.19 "tiger.lex"*)Tokens.THEN(yypos,yypos+4)(*#line 999.1 "tiger.lex.sml"*)
)
| 77 => ((*#line 64.20 "tiger.lex"*)Tokens.ARRAY(yypos,yypos+5)(*#line 1001.1 "tiger.lex.sml"*)
)
| 8 => ((*#line 49.17 "tiger.lex"*)Tokens.IF(yypos,yypos+2)(*#line 1003.1 "tiger.lex.sml"*)
)
| 82 => ((*#line 65.19 "tiger.lex"*)Tokens.TYPE(yypos, yypos+4)(*#line 1005.1 "tiger.lex.sml"*)
)
| 85 => ((*#line 66.18 "tiger.lex"*)Tokens.ASSIGN(yypos,yypos+2)(*#line 1007.1 "tiger.lex.sml"*)
)
| 87 => ((*#line 67.18 "tiger.lex"*)Tokens.COMMA(yypos,yypos+1)(*#line 1009.1 "tiger.lex.sml"*)
)
| 89 => ((*#line 68.18 "tiger.lex"*)Tokens.OR(yypos,yypos+1)(*#line 1011.1 "tiger.lex.sml"*)
)
| 91 => ((*#line 69.18 "tiger.lex"*)Tokens.AND(yypos,yypos+1)(*#line 1013.1 "tiger.lex.sml"*)
)
| 94 => ((*#line 70.19 "tiger.lex"*)Tokens.GE(yypos,yypos+2)(*#line 1015.1 "tiger.lex.sml"*)
)
| 96 => ((*#line 71.18 "tiger.lex"*)Tokens.GT(yypos,yypos+1)(*#line 1017.1 "tiger.lex.sml"*)
)
| 99 => ((*#line 72.19 "tiger.lex"*)Tokens.LE(yypos,yypos+2)(*#line 1019.1 "tiger.lex.sml"*)
)
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
